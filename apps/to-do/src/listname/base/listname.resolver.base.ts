/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateListnameArgs } from "./CreateListnameArgs";
import { UpdateListnameArgs } from "./UpdateListnameArgs";
import { DeleteListnameArgs } from "./DeleteListnameArgs";
import { ListnameCountArgs } from "./ListnameCountArgs";
import { ListnameFindManyArgs } from "./ListnameFindManyArgs";
import { ListnameFindUniqueArgs } from "./ListnameFindUniqueArgs";
import { Listname } from "./Listname";
import { User } from "../../user/base/User";
import { ListnameService } from "../listname.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Listname)
export class ListnameResolverBase {
  constructor(
    protected readonly service: ListnameService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Listname",
    action: "read",
    possession: "any",
  })
  async _listnamesMeta(
    @graphql.Args() args: ListnameCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Listname])
  @nestAccessControl.UseRoles({
    resource: "Listname",
    action: "read",
    possession: "any",
  })
  async listnames(
    @graphql.Args() args: ListnameFindManyArgs
  ): Promise<Listname[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Listname, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Listname",
    action: "read",
    possession: "own",
  })
  async listname(
    @graphql.Args() args: ListnameFindUniqueArgs
  ): Promise<Listname | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Listname)
  @nestAccessControl.UseRoles({
    resource: "Listname",
    action: "create",
    possession: "any",
  })
  async createListname(
    @graphql.Args() args: CreateListnameArgs
  ): Promise<Listname> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        uid: {
          connect: args.data.uid,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Listname)
  @nestAccessControl.UseRoles({
    resource: "Listname",
    action: "update",
    possession: "any",
  })
  async updateListname(
    @graphql.Args() args: UpdateListnameArgs
  ): Promise<Listname | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          uid: {
            connect: args.data.uid,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Listname)
  @nestAccessControl.UseRoles({
    resource: "Listname",
    action: "delete",
    possession: "any",
  })
  async deleteListname(
    @graphql.Args() args: DeleteListnameArgs
  ): Promise<Listname | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "uid",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUid(
    @graphql.Parent() parent: Listname
  ): Promise<User | null> {
    const result = await this.service.getUid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
